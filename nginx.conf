user www-data;
worker_processes 1;
events {
    # Allows up to 1024 connections, can be adjusted
    worker_connections 1024;
}
 
# RTMP configuration
rtmp {
    server {
        listen 1935; # Listen on standard RTMP port
        chunk_size 4000; 
        
        # This application is to accept incoming stream
        application live {
            live on; # Allows live input
	
            # Simple auth built in to nginx from https://groups.google.com/forum/#!topic/nginx-rtmp/Tv8hQ14tsgE
            on_publish http://localhost/onpublish_auth; 

            # This is based on http://helping-squad.com/nginx-rtmp-secure-your-nginx-server/
            #on_publish http://localhost/auth.php;
            notify_method get;
            
            # Once receive stream, transcode for adaptive streaming
            # This single ffmpeg command takes the input and transforms
            # the source into 4 different streams with different bitrate
            # and quality. P.S. The scaling done here respects the aspect
            # ratio of the input.
            #exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
            #            -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_low
            #            -c:v libx264 -c:a libvo_aacenc -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_mid
            #            -c:v libx264 -c:a libvo_aacenc -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_high
            #            -c:v libx264 -c:a libvo_aacenc -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/show/$name_hd720
            #            -c copy -f flv rtmp://localhost/show/$name_src;
            exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1 -c copy -f flv rtmp://localhost/show/$name;

            recorder myrec {
                record all;
                record_suffix -%Y-%m-%d-%H%M.flv;
                record_path /recordings;
			}
        }
        
        # This application is for splitting the stream into HLS fragments
        application show {
            live on; # Allows live input from above
            hls on; # Enable HTTP Live Streaming
            
            # Pointing this to an SSD is better as this involves lots of IO
            hls_path /hls/;
            
            # Instruct clients to adjust resolution according to bandwidth
            #hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
            #hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
            #hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            #hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            #hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
        }
    }
}
 
http {
    # See http://licson.net/post/optimizing-nginx-for-large-file-delivery/ for more detail
    # This optimizes the server for HLS fragment delivery
    sendfile off;
    tcp_nopush on;
    directio 512;
    
    # HTTP server required to serve the player and HLS fragments
    server {
        listen 80;
        root /usr/local/www/;
		index index.html;
	
		# Use this for really simple stream authentication as per https://groups.google.com/d/msg/nginx-rtmp/Tv8hQ14tsgE/5REh-oSvMrAJ
        # OBS settings:
        # - Server: rtmp://localhost:1935/live
        # - Stream key: ?key=password

		location /onpublish_auth { 
		if ($arg_key = 'PASSWORDTOKEN') { 
			return 201; 
		} 
			return 404; 
		}

        # Based on http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/
        #location ~ \.php$ {
        #    try_files $uri =404;
        #    fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #    fastcgi_pass php:9000;
        #    fastcgi_index index.php;
        #    include fastcgi_params;
        #    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #    fastcgi_param PATH_INFO $fastcgi_path_info;
        #}

		location ~ /\.ht {
			deny all;
		}
        
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
            }
            
            root /mnt/;
            add_header Cache-Control no-cache; # Prevent caching of HLS fragments
            add_header Access-Control-Allow-Origin *; # Allow web player to access our playlist
        }

        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;

            # Use this stylesheet to view XML as web page
            # in browser
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # XML stylesheet to view RTMP stats.
            # Copy stat.xsl wherever you want
            # and put the full directory path here
            root /usr/local/www/;
        }
    }
}
